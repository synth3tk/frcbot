import ConfigParser
import datetime
import json
import OAuth2Util
from pprint import pprint
import praw
import requests
import sys, traceback
from TheBlueAlliance import *

# Read the config file
config = ConfigParser.ConfigParser()
config.read("settings.cfg")
SUBREDDIT = config.get("Reddit", "subreddit")
# Eventually this will be based off of TBA exposing the week
# As of now, it's only useful for the post title anyway
CURRENT_WEEK = '5'
HEADERS = {'X-TBA-App-Id': config.get("TBA", "appid")}
URL = 'http://www.thebluealliance.com/api/v2/'

# Datetime stuff for current week dates
today = datetime.date.today()
week_start_datetime = today - datetime.timedelta(days=today.weekday())
week_start = week_start_datetime.strftime('%Y-%m-%d')
week_end_datetime = week_start_datetime + datetime.timedelta(days=6)
week_end = week_end_datetime.strftime('%Y-%m-%d')

def get_events():
    pprint('grabbing events...')
    r = requests.get(URL + 'events/2016', headers=HEADERS)
    events = r.json()

    return events

def main():
    try:
        # Setup PRAW instance
        pprint('initializing reddit connection...')
        reddit = praw.Reddit(user_agent=config.get("Reddit", "useragent"))
        o = OAuth2Util.OAuth2Util(reddit)
        o.refresh(force=True)
        toc = '';
        
        # If the post exists, exit. Otherwise, continue.
        pprint('checking if post exists...')
        sub = reddit.get_subreddit(SUBREDDIT)
        search = reddit.search('[Discussion] Week '+CURRENT_WEEK, subreddit=SUBREDDIT, sort='new', period='month')
        search_list = list(search)
        for post in search_list:
            if post.title == '[Discussion] Week '+CURRENT_WEEK:
			    pprint('post already exists! exiting.')
			    return

        pprint('posting the thread...')
        post = sub.submit('[Discussion] Week '+CURRENT_WEEK, text="", send_replies=False)
        post.sticky(bottom=True)
        post.distinguish()
        post.set_suggested_sort('old')

        # Grab ALL events from TBA and create a comment for this week's events
        # Once a week endpoint is released, this will only grab that instead
        # https://github.com/the-blue-alliance/the-blue-alliance/pull/1107
        events = get_events()
        pprint('creating comments for each event...')
        for event in events:
            if event['start_date'] >= week_start and event['end_date'] <= week_end:
                pprint('# '+event['key'])
                comment = post.add_comment('##' + event['name'] +
                                '\n\n'+ event['location'] + ' || ' +
                                datetime.datetime.strptime(event['start_date'], '%Y-%m-%d').strftime('%B %d') +
                                ' - ' + datetime.datetime.strptime(event['end_date'], '%Y-%m-%d').strftime('%B %d') +
                                '\n\n---\n\nMore Information: https://www.thebluealliance.com/event/'+event['key'])
                comment.distinguish()
                # Add the comment to the table-of-contents var for the post edit
                toc += '- [' + event['name'] + '](' + comment.permalink + ')\n\n'
         
        pprint('adding a comment ToC to the OP...')
        post.edit('Here are some handy links to each event\'s top-level comment:\n\n' + toc +
                '---\n*This post was automatically generated by a script. If you have any suggestions or features, please file an issue at the [GitHub repo](https://github.com/synth3tk/frcbot/issues)!*')

        pprint('done!')
        
    except Exception as err:
        print traceback.print_exc()
    sys.exit(0)

if __name__ == '__main__':
    main()
